import java.util.*;

// node class is the basic structure
    // of each node present in the huffman - tree.
    class HuffmanNode {

        double data;
        char c;
        String code;

        HuffmanNode left;
        HuffmanNode right;
    }

    // comparator class helps to compare the node
    // on the basis of one of its attribute.
    // Here we will be compared
    // on the basis of data values of the nodes.
    class MyComparator implements Comparator<HuffmanNode> {
        public int compare(HuffmanNode x, HuffmanNode y)
        {
            return Double.compare(x.data, y.data);
        }
    }

public class Huffman {
    HuffmanNode root;
    String in;
    String out;

    public void printOriginal() {
        System.out.println(in);
    }

    public void printEncoded() {
        System.out.println(out);
    }

    public void printCode() {
        printCode(root, "");
    }

    // recursive function to print the
    // huffman-code through the tree traversal.
    // Here s is the huffman - code generated.
    private void printCode(HuffmanNode root, String s) {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.left
                == null
                && root.right
                == null
                && (Character.isLetter(root.c)
                || Character.isSpaceChar(root.c))) {

            // c is the character in the node
            root.code = s;
            //System.out.println(root.c + ": " + root.code);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add "1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    private static void buildHuffMap(HuffmanNode root, HashMap<Character, String> hm) {
        if (root.left
                == null
                && root.right
                == null
                && (Character.isLetter(root.c)
                || Character.isSpaceChar(root.c))) {

            hm.put(root.c, root.code);

            return;
        } else {
            buildHuffMap(root.left, hm);
            buildHuffMap(root.right, hm);
        }
    }

    public void encode(HuffmanNode root, String in) {
        String out = "";
        HashMap<Character, String> huffMap = new HashMap<Character, String>();
        buildHuffMap(root, huffMap);
        for (char c : in.toCharArray()) {
            out = out + huffMap.get(c);
        }
        this.out = out;
    }

    // main function
    public void buildCode(String in) {
        this.in = in;
        int n = in.length();
        char[] charArray = in.toCharArray();
        HashMap<Character, Double> charFreq = charFreq(in);

        // creating a priority queue q.
        // makes a min-priority queue(min-heap).
        PriorityQueue<HuffmanNode> q
                = new PriorityQueue<HuffmanNode>(n, new MyComparator());

        for (char c : charFreq.keySet()) {

            // creating a huffman node object
            // and adding it to the priority-queue.
            HuffmanNode hn = new HuffmanNode();

            hn.c = c;
            hn.data = (Double) charFreq.get(c);

            hn.left = null;
            hn.right = null;

            // add functions adds
            // the huffman node to the queue.
            q.add(hn);
        }

        // create a root node
        root = null;

        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (q.size() > 1) {
            // first min extract.
            HuffmanNode x = q.peek();
            q.poll();
            // second min extarct.
            HuffmanNode y = q.peek();
            q.poll();
            // new node f which is equal
            HuffmanNode f = new HuffmanNode();
            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.data = x.data + y.data;
            f.c = '-';
            // first extracted node as left child.
            f.left = x;
            // second extracted node as the right child.
            f.right = y;
            // marking the f node as the root node.
            root = f;
            // add this node to the priority-queue.
            q.add(f);
        }

        // print the codes by traversing the tree
        printCode();
        encode(root, in);
    }

    private static HashMap charFreq(String in) {
        HashMap<Character, Double> freq = new HashMap<Character, Double>();
        for (int i = 0; i < in.length(); i++) {
            char c = in.charAt(i);
            if (freq.containsKey(c)) {
                freq.put(c, freq.get(c) + 1);
            } else {
                freq.put(c, 1.0);
            }
        }
        double divisor = (double) in.length();
        for (char c : freq.keySet()) {
            double numerator = (double) freq.get(c);
            freq.put(c, numerator / divisor);
        }
        return freq;
    }
}

// This code is contributed by Kunwar Desh Deepak Singh